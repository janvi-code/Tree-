import java.util.*;
import java.lang.*;
class Node { 
        int key; 
        Node left, right; 
  
        public Node(int item) { 
            key = item; 
            left = right = null; 
        } 
    } 
class BinarySearchTree{
    Node insert(Node root,int key) { 
        Node t = insertRec(root, key); 
       return t;
    } 
      
    /* A recursive function to insert a new key in BST */
    Node insertRec(Node root, int key) { 
  
        /* If the tree is empty, return a new node */
        if (root == null) { 
            root = new Node(key); 
            return root; 
        } 
  
        /* Otherwise, recur down the tree */
        if (key < root.key) 
            root.left = insertRec(root.left, key); 
        else if (key > root.key) 
            root.right = insertRec(root.right, key); 
  
        /* return the (unchanged) node pointer */
        return root; 
    } 
  
    // This method mainly calls InorderRec() 
    void inorder(Node root)  { 
       inorderRec(root); 
    } 
  
    // A utility function to do inorder traversal of BST 
    void inorderRec(Node root) { 
        if (root != null) { 
            inorderRec(root.left); 
            System.out.println(root.key); 
            inorderRec(root.right); 
        } 
    } 
    Node floor(Node root,int val){
        Node t = helper(root,val);
        if(t.key>val)
          return null;
        return t;  
    }
    Node helper(Node root,int val){
        if(root.key == val)
           return root;
        if((root.key<val && root.right == null)||(root.key>val && root.left== null))
           return root;
        if(root.key>val)
          return helper(root.left,val);
        else
          return helper(root.right,val);
    }
}    
    
class Main { 
   public static void main(String[] args) { 
        BinarySearchTree tree = new BinarySearchTree(); 
         Node root = null; 
  
        /* Let us create following BST 
              50 
           /     \ 
          30      70 
         /  \    /  \ 
       20   40  60   80 */
        root = tree.insert(root,10); 
        root = tree.insert(root,5); 
        root = tree.insert(root,15); 
        root = tree.insert(root,12); 
        root = tree.insert(root,30); 
  
        // print inorder traversal of the BST 
        tree.inorder(root); 
        Node temp = tree.floor(root,100);
        if(temp!=null)
        System.out.println("floor = "+temp.key);
        else
        System.out.println("NULL");
    } 
} 