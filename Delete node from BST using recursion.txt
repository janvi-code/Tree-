class Node{

    int data;

    Node left;
 
   Node right;
 
   Node(int data){
 
       this.data = data;

        left=null;
 
       right=null;
  
  }

}
class Tree
{
 
   public static int getMin(Node root)
{

        while(root.left!=null){

            root = root.left;
 
       }

        return root.data;
 
   }
    
// Return the root of the modified BST after deleting the node with value X
	
public static Node deleteNode(Node root, int X){

	    if(isPresent(root,X)){

	        return delete(root,X);

	    }
	
    return root;
	
}
public static boolean isPresent(Node root,int X){

	    Node t = root;
	
    while(t!=null){

	        if(t.data>X)
	
           t = t.left;
	
        else if(t.data<X)
	      
    t = t.right;
	
        else
	   
      return true;

	    }
	
    return false;
	
}
public static Node delete(Node root, int X)

	{

	   if(root.data > X){
	
       root.left = deleteNode(root.left,X);

	   }else if(root.data <X){

	       root.right = deleteNode(root.right,X);
	 
  }else{
	
       if(root.left == null && root.right == null){
	
          return null; 
	    
   }
	
       else if((root.left== null && root.right!=null) || (root.left!=null && root.right==null)){

	           if(root.left !=null)
	         
    return root.left;
	        
   else
	          
   return root.right;
	  
     }
	 
      else{
	     
      int min = getMin(root.right);
	  
         root.data = min;
	   
        root.right = deleteNode(root.right,min);

	       }
	
   }
	
   return root;

	}

}	