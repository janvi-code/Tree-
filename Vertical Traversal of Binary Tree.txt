class MyPair
{
    Node node;
    int hd;
    MyPair(Node n, int h)
    {
        node = n;
        hd = h;
    }
}

class BinaryTree
{
    static ArrayList <Integer> verticalOrder(Node root)
    {
        ArrayList <Integer> res = new ArrayList <Integer>(0);
        Queue<MyPair>q=new LinkedList<MyPair>();
        Map<Integer,ArrayList<Integer>>mp=new TreeMap<>();
        q.add(new MyPair(root, 0));
        while(!q.isEmpty())
        {
            MyPair temp = q.poll();
            Node temp_root = temp.node;
            int hd = temp.hd;
            if (mp.containsKey(hd))
             {
                 ArrayList<Integer>al=mp.get(hd);
                 al.add(temp_root.data);
                 mp.put(hd,al);
             }
             else
             {
                 ArrayList<Integer>al=new ArrayList<>();
                 al.add(temp_root.data);
                 mp.put(hd,al);
             }
            
                if(temp_root.left!=null)
                   q.add(new MyPair(temp_root.left, hd-1));
               if(temp_root.right!=null)
                   q.add(new MyPair(temp_root.right, hd+1));
            
        }
        
        for(Map.Entry<Integer,ArrayList<Integer>>m:mp.entrySet())
        {
            ArrayList<Integer>al=m.getValue();
            for(int i=0;i<al.size();i++)
              res.add(al.get(i));
            
        }
        return res;
    }
}